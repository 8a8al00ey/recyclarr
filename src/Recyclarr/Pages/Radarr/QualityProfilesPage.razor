@page "/radarr/quality-profiles"
@using TrashLib.Radarr.CustomFormat.Api
@using TrashLib.Radarr.CustomFormat.Api.Models
@using TrashLib.Radarr.Config
@using TrashLib.Config
@using Recyclarr.Components
@using Flurl.Http
@using Recyclarr.Code.Radarr
@using TrashLib.Cache
@using TrashLib.Radarr.CustomFormat
@using TrashLib.Radarr.CustomFormat.Cache


<div class="d-flex mb-4 flex-column flex-sm-row">
    <ServerSelector TConfig="RadarrConfig"
                    @ref="_serverSelector"
                    Label="Choose Radarr Server"
                    SelectionChanged="@OnSelectedInstanceChanged" />
</div>

<MudPaper Class="d-flex flex-column pa-4" Outlined="true">
    @if (_exception != null)
    {
        <MudContainer>
            <MudText Class="mb-2">
                A failure occurred while trying to get quality profiles from Radarr:
            </MudText>

            <MudText Class="mb-2" Color="Color.Error" Style="overflow: hidden">
                @_exception.Message
            </MudText>

            <MudButton Class="mud-theme-primary my-2" OnClick="@ForceReload">Retry</MudButton>
        </MudContainer>
        return;
    }

    @if (_loading)
    {
        <MudContainer Class="d-flex flex-column align-center">
            <MudText Align="Align.Center">Loading quality profiles...</MudText>
            <MudProgressCircular Class="mt-2" Color="Color.Primary" Indeterminate="true" />
        </MudContainer>
        return;
    }

    @if (_profiles.Count == 0)
    {
        <MudText Typo="Typo.body1" Class="mx-auto">
            This instance has no quality profiles
        </MudText>
        return;
    }

    <MudSelect @bind-Value="@SelectedProfile" Class="mb-2" Style="width: auto">
        @foreach (var profile in _profiles)
        {
            <MudSelectItem @key="profile" Value="@profile">
                @profile.Name
            </MudSelectItem>
        }
    </MudSelect>

    @* <MudList @ref="@_profileSelectList" *@
    @*          T="JObject" *@
    @*          Clickable="true" *@
    @*          @bind-SelectedItem="@SelectedListItem" *@
    @*          Class="mr-2" /> *@

    <MudSimpleTable Dense="true">
        <thead>
        <tr>
            <th>Custom Format</th>
            <th>Manual Score</th>
            <th>Guide Score</th>
            <th>Radarr Score</th>
        </tr>
        </thead>
        <tbody>
        @if (SelectedProfile != null)
        {
            @foreach (var formatItem in SelectedProfile.FormatItems)
            {
                <tr>
                    <td>@formatItem.Name</td>
                    <td>
                        <MudTextField @bind-Value="@formatItem.Score"
                                      FullWidth="false"
                                      Margin="Margin.Dense"
                                      Variant="Variant.Outlined"
                                      Style="width: 100px" />
                    </td>
                    <td></td>
                    <td>@formatItem.Score</td>
                </tr>
            }
        }

        </tbody>

    </MudSimpleTable>
</MudPaper>

@code {

    [Inject]
    public Func<string, IQualityProfileService> ProfileServiceFactory { get; set; } = default!;

    [Inject]
    public IConfigRepository<RadarrConfig> ConfigRepo { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    class ProfileSelectionPageManager
    {
        private readonly ICustomFormatCache _cfCache;
        private readonly Func<string, ICustomFormatService> _customFormatServiceFactory;

        public ProfileSelectionPageManager(
            ICustomFormatCache cfCache,
            Func<string, ICustomFormatService> customFormatServiceFactory)
        {
            _cfCache = cfCache;
            _customFormatServiceFactory = customFormatServiceFactory;
        }

        async Task RequestCustomFormatsAndUpdateCache(RadarrConfig config)
        {
            var cfService = _customFormatServiceFactory(config.BuildUrl());
            var customFormats = await cfService.GetCustomFormats();
        }
    }

    private async Task OnSelectedInstanceChanged(RadarrConfig? activeConfig)
    {
        try
        {
            _activeConfig = activeConfig;
            _exception = null;
            _loading = true;
            _profiles.Clear();

            if (activeConfig != null)
            {
                // todo:
                // - Build the cache (for TrashID -> CfId mapping)
                // - Need to pair guide score with current profile score
                // - Exclude FormatItems that represent Custom Formats not selected by the user
                //
                // var qualityProfiles = await ProfileServiceFactory(activeConfig.BuildUrl()).GetQualityProfiles();
                // qualityProfiles.Where(_activeConfig.CustomFormats)
                // _profiles.AddRange();
            }

            SelectedProfile = _profiles.FirstOrDefault();
        }
        catch (FlurlHttpException e)
        {
            _exception = e;
        }

        _loading = false;
    }

    private RadarrConfig? _activeConfig;
    private ServerSelector<RadarrConfig>? _serverSelector;
    private readonly List<QualityProfileData> _profiles = new();
    private Exception? _exception;
    private bool _loading;

    private async Task ForceReload()
    {
        await OnSelectedInstanceChanged(_activeConfig);
    }

    private QualityProfileData? SelectedProfile { get; set; }

    // private int? _selectedProfileId;
}
